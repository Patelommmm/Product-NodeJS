# Full Guide for Node.js Project

This guide explains the full flow of the project, including setup, libraries, functions, and commands. It is designed for beginners to understand every step.

---

## 1. Project Overview
This project is a RESTful API built with Node.js, Express, and MongoDB. It includes the following features:
- User authentication (signup, login, delete user).
- Product management (CRUD operations).
- Order management (CRUD operations).
- JWT-based authentication for secure routes.

---

## 2. Prerequisites
Before starting, ensure you have the following installed:
- **Node.js**: Download from [https://nodejs.org/](https://nodejs.org/).
- **npm**: Comes with Node.js.
- **MongoDB**: Install MongoDB locally or use a cloud service like MongoDB Atlas.

---

## 3. Project Setup
### Step 1: Clone or Create the Project
- Create a new folder for your project:
  ```bash
  mkdir NodeJsProjects
  cd NodeJsProjects
  mkdir Learning
  cd Learning


  Step 2: Initialize the Project
Initialize a new Node.js project:
npm init -y


Step 3: Install Required Libraries
Install the following libraries:

Express: For building the server.
Mongoose: For interacting with MongoDB.
bcrypt: For hashing passwords.
jsonwebtoken: For generating and verifying JWT tokens.
dotenv: For managing environment variables.
Run the following command:

npm install express mongoose bcrypt jsonwebtoken dotenv

4. Folder Structure
Organize your project as follows:

Learning/
├── api/
│   ├── controllers/
│   │   ├── user.js
│   │   ├── products.js
│   │   └── orders.js
│   ├── middleware/
│   │   └── check-auth.js
│   ├── models/
│   │   ├── user.js
│   │   ├── product.js
│   │   └── order.js
│   └── routes/
│       ├── user.js
│       ├── products.js
│       └── orders.js
├── [app.js](http://_vscodecontentref_/2)
├── [server.js](http://_vscodecontentref_/3)
├── [package.json](http://_vscodecontentref_/4)
├── [nodemon.json](http://_vscodecontentref_/5)
└── .env


5. Environment Variables
Create a .env file in the root directory and add the following:PORT=3000
MONGO_ATLAS_PW=admin
JWT_KEY=secret


6. Key Files and Functions
6.1 app.js
This is the entry point of the application. It sets up the server and routes.

Key Features:
Connects to MongoDB.
Sets up middleware for logging, parsing, and CORS.
Defines routes for users, products, and orders.
Handles errors.
6.2 api/controllers/user.js
Handles user-related operations like signup, login, and delete.

Key Functions:
Signup:
Hashes the password using bcrypt.
Saves the user to MongoDB.
Login:
Verifies the password using bcrypt.
Generates a JWT token using jsonwebtoken.
Delete User:
Deletes a user by ID.

6.3 api/controllers/products.js
Handles product-related operations like create, read, update, and delete.

Key Functions:
Create Product:
Saves a new product to MongoDB.
Get All Products:
Fetches all products from MongoDB.
Update Product:
Updates a product by ID.
Delete Product:
Deletes a product by ID.

6.4 api/controllers/orders.js
Handles order-related operations like create, read, update, and delete.

Key Functions:
Create Order:
Saves a new order to MongoDB.
Get All Orders:
Fetches all orders from MongoDB.
Update Order:
Updates an order by ID.
Delete Order:
Deletes an order by ID.
6.5 api/middleware/check-auth.js
Middleware to verify JWT tokens for protected routes.

const jwt = require('jsonwebtoken');

module.exports = (req, res, next) => {
    try {
        const token = req.headers.authorization.split(" ")[1];
        const decoded = jwt.verify(token, process.env.JWT_KEY);
        req.userData = decoded;
        next();
    } catch (error) {
        return res.status(401).json({ message: 'Auth failed' });
    }
};


7. Running the Project
Step 1: Start MongoDB
If MongoDB is installed locally, start the MongoDB server:
mongod

Step 2: Start the Application
Run the application:
npm start

Step 3: Test the API
Use tools like Postman or cURL to test the API endpoints.

Example Endpoints:
Signup: POST /user/signup
{
    "email": "test@example.com",
    "password": "password123"
}

Login: POST /user/login
{
    "email": "test@example.com",
    "password": "password123"
}

Create Product: POST /products
{
    "name": "Sample Product",
    "price": 49.99
}

8. Closing the Project
Step 1: Stop the Server
Press Ctrl + C in the terminal to stop the server.
Step 2: Stop MongoDB
If MongoDB is running locally, stop the MongoDB server:
mongod --shutdown

9. Additional Notes
Always use .env to store sensitive information like database URIs and JWT keys.
Use tools like Postman to test your API endpoints.
Follow best practices for error handling and validation.
This guide should help you set up, run, and understand the project step by step. Let me know if you need further assistance!
---

### Save the File:
Replace the content of [readme.txt](http://_vscodecontentref_/6) with the above text. Let me know if you need further assistance!